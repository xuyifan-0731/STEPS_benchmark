{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | voter_1 | area_code_state : area_code , state ( CA ) | contestants : contestant_number , contestant_name | votes : vote_id , phone_number , state ( CA ) , contestant_number , created. \\n Question: What is last date created of votes from the state 'CA'? \\n Answer:", "answer": ["select max(created) from votes where state = 'CA'"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | employee_hire_evaluation | employee : employee_id , name , age , city | shop : shop_id , name , location , district , number_products , manager_name | hiring : shop_id , employee_id , start_from , is_full_time | evaluation : employee_id , year_awarded , bonus. \\n Question: find the average number of products of all stores. \\n Answer:", "answer": ["select avg(number_products) from shop"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details. \\n Question: Also show their template type code. || Only show those with version number later than 5. | What is the version number for all template? \\n Answer:", "answer": ["select version_number, template_type_code from templates where version_number > 5"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | flight_2 | airlines : uid , airline ( JetBlue Airways ) , abbreviation ( JetBlue ) , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport. \\n Question: Which abbreviation corresponds to Jetblue Airways? \\n Answer:", "answer": ["select abbreviation from airlines where airline = \"JetBlue Airways\""], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details. \\n Question: Show information for all documents. \\n Answer:", "answer": ["select * from documents"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id. \\n Question: Show me the student_id and the grade for all students. \\n Answer:", "answer": ["select id, grade from highschooler"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | voter_1 | area_code_state : area_code , state | contestants : contestant_number , contestant_name | votes : vote_id , phone_number , state , contestant_number , created. \\n Question: Show all area codes and states. \\n Answer:", "answer": ["select * from area_code_state"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade. \\n Question: Which teachers are age 32? || What are the ages of all the teachers? \\n Answer:", "answer": ["select * from teacher where age = 32"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport. \\n Question: What are all the airlines? \\n Answer:", "answer": ["select distinct airline from airlines"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year. \\n Question: How many makes are there for each? || What are the makes for each? | What are all the different models for each car? \\n Answer:", "answer": ["select model, count(*) from car_names group by model;"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | cre_Doc_Template_Mgt | ref_template_types : template_type_code ( CV ) , template_type_description ( CV ) | templates : template_id , version_number , template_type_code ( CV ) , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name ( Robbin CV ) , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details. \\n Question: Also show its template id and description. || Show the document id for the one named \"Robbin CV\"? | Show the the document name for all documents. \\n Answer:", "answer": ["select document_id, template_id, document_description from documents where document_name = \"Robbin CV\""], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance. \\n Question: List names of conductors in descending order of years of work. \\n Answer:", "answer": ["select name from conductor order by year_of_work desc"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | battle_death | battle : id , name , date , bulgarian_commander , latin_commander , result | ship : lost_in_battle , id , name , tonnage , ship_type , location ( English Channel ) , disposition_of_ship | death : caused_by_ship_id , id , note , killed , injured. \\n Question: Which battle ids and names lost ships in the 'English Channel'? \\n Answer:", "answer": ["select t1.id, t1.name from battle as t1 join ship as t2 on t1.id = t2.lost_in_battle where t2.location = 'English Channel'"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent ( Africa ) , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform ( Republic ) , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage. \\n Question: What is the average of their life expectancies? || Which countries are also republics? | Which countries are in Africa? \\n Answer:", "answer": ["select avg(lifeexpectancy) from country where continent = \"Africa\" and governmentform = \"Republic\""], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | voter_1 | area_code_state : area_code , state | contestants : contestant_number , contestant_name | votes : vote_id , phone_number , state , contestant_number , created. \\n Question: How about smallest one? || What is the largest one? | Show all area codes. \\n Answer:", "answer": ["select min(area_code) from area_code_state"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id. \\n Question: Show the capacity for all stadiums. \\n Answer:", "answer": ["select capacity from stadium"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details. \\n Question: Also show the document ids using each template. || Show all template type codes. \\n Answer:", "answer": ["select t1.template_type_code, t2.document_id from templates as t1 join documents as t2 on t1.template_id = t2.template_id"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details. \\n Question: For each of these document ids, count the number of paragraphs. || Show the document id for all paragraphs. \\n Answer:", "answer": ["select document_id, count(*) from paragraphs group by document_id"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours. \\n Question: More than 10? || Which ones have more than 20 matches? | How many distinct tourney names are there? \\n Answer:", "answer": ["select tourney_name from matches group by tourney_name having count(*) > 10"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id. \\n Question: Also list the location for them. || What about those with a capacity between 5000 and 10000? | Show the name for all stadiums. \\n Answer:", "answer": ["select location, name from stadium where capacity between 5000 and 10000"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment. \\n Question: Show the dog name and total cost of each dog. \\n Answer:", "answer": ["select name, sum(cost_of_treatment) from treatments as t1 join dogs as t2 on t1.dog_id = t2.dog_id group by t1.dog_id"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport. \\n Question: Which one has the fewest? || Order them by the number of flights that they have. | What are all the airline abbreviations and what countries are they in? \\n Answer:", "answer": ["select t1.abbreviation, t1.country from airlines as t1 join flights as t2 on t1.uid = t2.airline group by t1.airline order by count(*) limit 1"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id. \\n Question: How many of those students have not registered in any degree program? || How many students currently live in North Carolina? \\n Answer:", "answer": ["select count(*) from students as t1 join addresses as t2 on t1.current_address_id = t2.address_id where t2.state_province_county = 'NorthCarolina' except select distinct t3.last_name from students as t3 join student_enrolment as t4 on t3.student_id = t4.student_id"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | tvshow | tv_channel : id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option | tv_series : id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel | cartoon : id , title ( Return of the Fearsome Fangs! ) , directed_by , written_by , original_air_date , production_code , channel. \\n Question: Who is the director of the cartoon titled \"Return of the Fearsome Fangs!\"? \\n Answer:", "answer": ["select directed_by from cartoon where title = \"Return of the fearsome fangs!\""], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode ( CVO , APG ) , airportname , country , countryabbrev | flights : airline , flightno , sourceairport (  APG ,  CVO ) , destairport (  APG ,  CVO ). \\n Question: Which airlines have departing flights from both APG and CVO airports? \\n Answer:", "answer": ["select t1.airline from airlines as t1 join flights as t2 on t1.uid = t2.airline where t2.sourceairport = \"APG\" intersect select t1.airline from airlines as t1 join flights as t2 on t1.uid = t2.airline where t2.sourceairport = \"CVO\""], "label": "QA"}
