{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport. \\n Question: What is the code of airport that has fewest number of flights? \\n Answer:", "answer": ["select t1.airportcode from airports as t1 join flights as t2 on t1.airportcode = t2.destairport or t1.airportcode = t2.sourceairport group by t1.airportcode order by count(*) limit 1"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | voter_1 | area_code_state : area_code , state | contestants : contestant_number , contestant_name | votes : vote_id , phone_number , state , contestant_number , created. \\n Question: What are the distinct states and create time of all votes? \\n Answer:", "answer": ["select distinct state, created from votes"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours. \\n Question: How many players are there? \\n Answer:", "answer": ["select count(*) from players"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | tvshow | tv_channel : id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option | tv_series : id , episode ( A Love of a Lifetime ) , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel | cartoon : id , title , directed_by , written_by , original_air_date , production_code , channel. \\n Question: What is the name of the series that has the episode \"A Love of a Lifetime\"? \\n Answer:", "answer": ["select t1.series_name from tv_channel as t1 join tv_series as t2 on t1.id = t2.channel where t2.episode = \"A love of a Lifetime\";"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment. \\n Question: What is the name of the breed with the most dogs? \\n Answer:", "answer": ["select t1.breed_name from breeds as t1 join dogs as t2 on t1.breed_code = t2.breed_code group by t1.breed_name order by count(*) desc limit 1"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | battle_death | battle : id , name , date , bulgarian_commander , latin_commander , result | ship : lost_in_battle , id , name , tonnage , ship_type , location , disposition_of_ship ( Captured ) | death : caused_by_ship_id , id , note , killed , injured. \\n Question: How many ships ended up being 'Captured'? \\n Answer:", "answer": ["select count(*) from ship where disposition_of_ship = 'Captured'"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent ( Asia ) , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage. \\n Question: What is the language that is used by the largest number of Asian nations? \\n Answer:", "answer": ["select t2.language from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t1.continent = \"Asia\" group by t2.language order by count (*) desc limit 1"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent ( Asia ) , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage. \\n Question: Find the name, population and expected life length of asian country with the largest area? \\n Answer:", "answer": ["select name, population, lifeexpectancy from country where continent = \"Asia\" order by surfacearea desc limit 1"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | cre_Doc_Template_Mgt | ref_template_types : template_type_code ( AD ) , template_type_description | templates : template_id , version_number , template_type_code ( AD ) , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details | d : document_id , para_count. \\n Question: Return the template type description of the template type with the code AD. \\n Answer:", "answer": ["select template_type_description from ref_template_types where template_type_code = \"AD\""], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id. \\n Question: Show the names of high schoolers who have at least 3 friends. \\n Answer:", "answer": ["select t2.name from friend as t1 join highschooler as t2 on t1.student_id = t2.id group by t1.student_id having count(*) >= 3"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year. \\n Question: Which model saves the most gasoline? That is to say, have the maximum miles per gallon. \\n Answer:", "answer": ["select t1.model from car_names as t1 join cars_data as t2 on t1.makeid = t2.id order by t2.mpg desc limit 1;"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year. \\n Question: What are all the makers and models? \\n Answer:", "answer": ["select maker, model from model_list;"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | car_1 | continents : contid , continent ( america ) | countries : countryid , countryname , continent | car_makers : id , maker , fullname ( American Motor Company ) , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year. \\n Question: How many car models were produced by the maker with full name American Motor Company? \\n Answer:", "answer": ["select count(*) from car_makers as t1 join model_list as t2 on t1.id = t2.maker where t1.fullname = 'American motor Company';"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id. \\n Question: How many likes correspond to each student id? \\n Answer:", "answer": ["select student_id, count(*) from likes group by student_id"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment. \\n Question: List the date of each treatment, together with the first name of the professional who operated it. \\n Answer:", "answer": ["select t1.date_of_treatment, t2.first_name from treatments as t1 join professionals as t2 on t1.professional_id = t2.professional_id"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | singer | singer : singer_id , name , birth_year , net_worth_millions , citizenship | song : song_id , title , singer_id , sales , highest_position. \\n Question: What are the names of the singers that have more than one songs? \\n Answer:", "answer": ["select t1.name from singer as t1 join song as t2 on t1.singer_id = t2.singer_id group by t1.name having count(*) > 1"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage. \\n Question: Return the names of cities that have a population between 160000 and 900000 . \\n Answer:", "answer": ["select name from city where population between 160000 and 900000"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | flight_2 | airlines : uid , airline , abbreviation ( UAL ) , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport. \\n Question: Give the airline with abbreviation 'UAL'. \\n Answer:", "answer": ["select airline from airlines where abbreviation = \"UAL\""], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | flight_2 | airlines : uid , airline , abbreviation , country ( USA ) | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport. \\n Question: Return the number of airlines in the USA. \\n Answer:", "answer": ["select count(*) from airlines where country = \"USA\""], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id. \\n Question: What are all the course names of the courses which ever have students enrolled in? \\n Answer:", "answer": ["select distinct t1.course_name from courses as t1 join student_enrolment_courses as t2 on t1.course_id = t2.course_id"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown ( Little Lever Urban District ) | course_arrange : course_id , teacher_id , grade. \\n Question: List the name of teachers whose hometown is not `` Little Lever Urban District '' . \\n Answer:", "answer": ["select name from teacher where hometown != \"little lever urban district\""], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | world_1 | city : id , name ( Kabul ) , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage. \\n Question: What region is Kabul in? \\n Answer:", "answer": ["select region from country as t1 join city as t2 on t1.code = t2.countrycode where t2.name = \"Kabul\""], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade. \\n Question: List the names of teachers in ascending order of age. \\n Answer:", "answer": ["select name from teacher order by age asc"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | cre_Doc_Template_Mgt | ref_template_types : template_type_code ( CV ) , template_type_description ( CV ) | templates : template_id , version_number , template_type_code ( CV ) , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details | d : document_id , para_count. \\n Question: How many templates have template type code CV? \\n Answer:", "answer": ["select count(*) from templates where template_type_code = \"CV\""], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | tvshow | tv_channel : id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option | tv_series : id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel | cartoon : id , title , directed_by , written_by , original_air_date , production_code , channel. \\n Question: List the Episode of all TV series sorted by rating. \\n Answer:", "answer": ["select episode from tv_series order by rating"], "label": "QA"}
