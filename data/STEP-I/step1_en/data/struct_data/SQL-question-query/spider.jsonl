{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport. \\n Question: What is the code of airport that has fewest number of flights? \\n Answer:", "answer": ["select t1.airportcode from airports as t1 join flights as t2 on t1.airportcode = t2.destairport or t1.airportcode = t2.sourceairport group by t1.airportcode order by count(*) limit 1"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | voter_1 | area_code_state : area_code , state | contestants : contestant_number , contestant_name | votes : vote_id , phone_number , state , contestant_number , created. \\n Question: What are the distinct states and create time of all votes? \\n Answer:", "answer": ["select distinct state, created from votes"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours. \\n Question: How many players are there? \\n Answer:", "answer": ["select count(*) from players"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | tvshow | tv_channel : id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option | tv_series : id , episode ( A Love of a Lifetime ) , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel | cartoon : id , title , directed_by , written_by , original_air_date , production_code , channel. \\n Question: What is the name of the series that has the episode \"A Love of a Lifetime\"? \\n Answer:", "answer": ["select t1.series_name from tv_channel as t1 join tv_series as t2 on t1.id = t2.channel where t2.episode = \"A love of a Lifetime\";"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment. \\n Question: What is the name of the breed with the most dogs? \\n Answer:", "answer": ["select t1.breed_name from breeds as t1 join dogs as t2 on t1.breed_code = t2.breed_code group by t1.breed_name order by count(*) desc limit 1"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | battle_death | battle : id , name , date , bulgarian_commander , latin_commander , result | ship : lost_in_battle , id , name , tonnage , ship_type , location , disposition_of_ship ( Captured ) | death : caused_by_ship_id , id , note , killed , injured. \\n Question: How many ships ended up being 'Captured'? \\n Answer:", "answer": ["select count(*) from ship where disposition_of_ship = 'Captured'"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent ( Asia ) , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage. \\n Question: What is the language that is used by the largest number of Asian nations? \\n Answer:", "answer": ["select t2.language from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t1.continent = \"Asia\" group by t2.language order by count (*) desc limit 1"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent ( Asia ) , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage. \\n Question: Find the name, population and expected life length of asian country with the largest area? \\n Answer:", "answer": ["select name, population, lifeexpectancy from country where continent = \"Asia\" order by surfacearea desc limit 1"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | cre_Doc_Template_Mgt | ref_template_types : template_type_code ( AD ) , template_type_description | templates : template_id , version_number , template_type_code ( AD ) , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details | d : document_id , para_count. \\n Question: Return the template type description of the template type with the code AD. \\n Answer:", "answer": ["select template_type_description from ref_template_types where template_type_code = \"AD\""], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id. \\n Question: Show the names of high schoolers who have at least 3 friends. \\n Answer:", "answer": ["select t2.name from friend as t1 join highschooler as t2 on t1.student_id = t2.id group by t1.student_id having count(*) >= 3"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year. \\n Question: Which model saves the most gasoline? That is to say, have the maximum miles per gallon. \\n Answer:", "answer": ["select t1.model from car_names as t1 join cars_data as t2 on t1.makeid = t2.id order by t2.mpg desc limit 1;"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year. \\n Question: What are all the makers and models? \\n Answer:", "answer": ["select maker, model from model_list;"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | car_1 | continents : contid , continent ( america ) | countries : countryid , countryname , continent | car_makers : id , maker , fullname ( American Motor Company ) , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year. \\n Question: How many car models were produced by the maker with full name American Motor Company? \\n Answer:", "answer": ["select count(*) from car_makers as t1 join model_list as t2 on t1.id = t2.maker where t1.fullname = 'American motor Company';"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id. \\n Question: How many likes correspond to each student id? \\n Answer:", "answer": ["select student_id, count(*) from likes group by student_id"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment. \\n Question: List the date of each treatment, together with the first name of the professional who operated it. \\n Answer:", "answer": ["select t1.date_of_treatment, t2.first_name from treatments as t1 join professionals as t2 on t1.professional_id = t2.professional_id"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | singer | singer : singer_id , name , birth_year , net_worth_millions , citizenship | song : song_id , title , singer_id , sales , highest_position. \\n Question: What are the names of the singers that have more than one songs? \\n Answer:", "answer": ["select t1.name from singer as t1 join song as t2 on t1.singer_id = t2.singer_id group by t1.name having count(*) > 1"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage. \\n Question: Return the names of cities that have a population between 160000 and 900000 . \\n Answer:", "answer": ["select name from city where population between 160000 and 900000"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | flight_2 | airlines : uid , airline , abbreviation ( UAL ) , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport. \\n Question: Give the airline with abbreviation 'UAL'. \\n Answer:", "answer": ["select airline from airlines where abbreviation = \"UAL\""], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | flight_2 | airlines : uid , airline , abbreviation , country ( USA ) | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport. \\n Question: Return the number of airlines in the USA. \\n Answer:", "answer": ["select count(*) from airlines where country = \"USA\""], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id. \\n Question: What are all the course names of the courses which ever have students enrolled in? \\n Answer:", "answer": ["select distinct t1.course_name from courses as t1 join student_enrolment_courses as t2 on t1.course_id = t2.course_id"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown ( Little Lever Urban District ) | course_arrange : course_id , teacher_id , grade. \\n Question: List the name of teachers whose hometown is not `` Little Lever Urban District '' . \\n Answer:", "answer": ["select name from teacher where hometown != \"little lever urban district\""], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | world_1 | city : id , name ( Kabul ) , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage. \\n Question: What region is Kabul in? \\n Answer:", "answer": ["select region from country as t1 join city as t2 on t1.code = t2.countrycode where t2.name = \"Kabul\""], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade. \\n Question: List the names of teachers in ascending order of age. \\n Answer:", "answer": ["select name from teacher order by age asc"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | cre_Doc_Template_Mgt | ref_template_types : template_type_code ( CV ) , template_type_description ( CV ) | templates : template_id , version_number , template_type_code ( CV ) , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details | d : document_id , para_count. \\n Question: How many templates have template type code CV? \\n Answer:", "answer": ["select count(*) from templates where template_type_code = \"CV\""], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | tvshow | tv_channel : id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option | tv_series : id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel | cartoon : id , title , directed_by , written_by , original_air_date , production_code , channel. \\n Question: List the Episode of all TV series sorted by rating. \\n Answer:", "answer": ["select episode from tv_series order by rating"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours. \\n Question: Find the highest rank of losers in all matches. \\n Answer:", "answer": ["select min(loser_rank) from matches"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | singer | singer : singer_id , name , birth_year , net_worth_millions , citizenship | song : song_id , title , singer_id , sales , highest_position. \\n Question: How many singers are there? \\n Answer:", "answer": ["select count(*) from singer"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | poker_player | poker_player : poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings | people : people_id , nationality , name , birth_date , height. \\n Question: List the final tables made and the best finishes of poker players. \\n Answer:", "answer": ["select final_table_made, best_finish from poker_player"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode ( APG ) , airportname , country , countryabbrev | flights : airline , flightno , sourceairport (  APG ) , destairport (  APG ). \\n Question: Give the flight numbers of flights landing at APG. \\n Answer:", "answer": ["select flightno from flights where destairport = \"APG\""], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment. \\n Question: Find the id and cell phone of the professionals who operate two or more types of treatments. \\n Answer:", "answer": ["select t1.professional_id, t1.cell_number from professionals as t1 join treatments as t2 on t1.professional_id = t2.professional_id group by t1.professional_id having count(*) >= 2"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | pets_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | has_pet : stuid , petid | pets : petid , pettype ( dog ) , pet_age , weight. \\n Question: Find the weight of the youngest dog. \\n Answer:", "answer": ["select weight from pets order by pet_age limit 1"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language ( English ) , isofficial , percentage. \\n Question: Give the country codes for countries in which people speak langauges that are not English. \\n Answer:", "answer": ["select distinct countrycode from countrylanguage where language != \"English\""], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | tvshow | tv_channel : id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option | tv_series : id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel | cartoon : id , title , directed_by , written_by , original_air_date , production_code , channel. \\n Question: What is the produdction code and channel of the most recent cartoon ? \\n Answer:", "answer": ["select production_code, channel from cartoon order by original_air_date desc limit 1"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | tvshow | tv_channel : id , series_name ( Sky Radio ) , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option ( Option ) | tv_series : id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel | cartoon : id , title , directed_by , written_by , original_air_date , production_code , channel. \\n Question: What is the Package Option of TV Channel with serial name \"Sky Radio\"? \\n Answer:", "answer": ["select package_option from tv_channel where series_name = \"Sky Radio\";"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | flight_2 | airlines : uid , airline , abbreviation ( UAL ) , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport. \\n Question: Which airline has abbreviation 'UAL'? \\n Answer:", "answer": ["select airline from airlines where abbreviation = \"UAL\""], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id. \\n Question: How many high schoolers are there in grade 9 or 10? \\n Answer:", "answer": ["select count(*) from highschooler where grade = 9 or grade = 10"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id. \\n Question: What is the name of the course with the most students enrolled? \\n Answer:", "answer": ["select t1.course_name from courses as t1 join student_enrolment_courses as t2 on t1.course_id = t2.course_id group by t1.course_name order by count(*) desc limit 1"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details | d : document_id , para_count. \\n Question: What is the document name and template id for document with description with the letter 'w' in it? \\n Answer:", "answer": ["select document_name, template_id from documents where document_description like \"%w%\""], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent ( Europe ) , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage. \\n Question: What are the names of the countries that are in the continent of Europe and have a population of 80000? \\n Answer:", "answer": ["select name from country where continent = \"Europe\" and population = \"80000\""], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname ( General Motors ) , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year. \\n Question: What are the different models created by either the car maker General Motors or weighed more than 3500? \\n Answer:", "answer": ["select distinct t2.model from car_names as t1 join model_list as t2 on t1.model = t2.model join car_makers as t3 on t2.maker = t3.id join cars_data as t4 on t1.makeid = t4.id where t3.fullname = 'General Motors' or t4.weight > 3500;"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details | d : document_id , para_count. \\n Question: What the smallest version number and its template type code? \\n Answer:", "answer": ["select min(version_number), template_type_code from templates"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | flight_2 | airlines : uid , airline , abbreviation , country | airports : city ( Aberdeen  ) , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport. \\n Question: What are flight numbers of flights arriving at City \"Aberdeen\"? \\n Answer:", "answer": ["select t1.flightno from flights as t1 join airports as t2 on t1.destairport = t2.airportcode where t2.city = \"Aberdeen\""], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | pets_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | has_pet : stuid , petid | pets : petid , pettype ( dog ) , pet_age , weight. \\n Question: How many dog pets are raised by female students? \\n Answer:", "answer": ["select count(*) from student as t1 join has_pet as t2 on t1.stuid = t2.stuid join pets as t3 on t2.petid = t3.petid where t1.sex = 'F' and t3.pettype = 'dog'"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | tvshow | tv_channel : id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option | tv_series : id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel | cartoon : id , title , directed_by ( Ben Jones ) , written_by , original_air_date , production_code , channel. \\n Question: What are the ids of the TV channels that do not have any cartoons directed by Ben Jones? \\n Answer:", "answer": ["select id from tv_channel except select channel from cartoon where directed_by = 'Ben Jones'"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage. \\n Question: Which language is spoken by the largest number of countries? \\n Answer:", "answer": ["select language from countrylanguage group by language order by count(*) desc limit 1"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | employee_hire_evaluation | employee : employee_id , name , age , city | shop : shop_id , name , location , district , number_products , manager_name | hiring : shop_id , employee_id , start_from , is_full_time | evaluation : employee_id , year_awarded , bonus. \\n Question: Which shops run with no employees? Find the shop names \\n Answer:", "answer": ["select name from shop where shop_id not in (select shop_id from hiring)"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | network_1 | highschooler : id , name ( Kyle ) , grade | friend : student_id , friend_id | likes : student_id , liked_id. \\n Question: Count the number of friends Kyle has. \\n Answer:", "answer": ["select count(*) from friend as t1 join highschooler as t2 on t1.student_id = t2.id where t2.name = \"Kyle\""], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | car_1 | continents : contid , continent ( europe ) | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year. \\n Question: Which countries in europe have at least 3 car manufacturers? \\n Answer:", "answer": ["select t1.countryname from countries as t1 join continents as t2 on t1.continent = t2.contid join car_makers as t3 on t1.countryid = t3.country where t2.continent = 'europe' group by t1.countryname having count(*) >= 3;"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id. \\n Question: What are the names of all high schoolers in grade 10? \\n Answer:", "answer": ["select name from highschooler where grade = 10"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id. \\n Question: How many different degrees are offered? \\n Answer:", "answer": ["select count(distinct degree_summary_name) from degree_programs"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | tvshow | tv_channel : id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option | tv_series : id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel | cartoon : id , title , directed_by , written_by , original_air_date , production_code , channel. \\n Question: How many different series and contents are listed in the TV Channel table? \\n Answer:", "answer": ["select count(distinct series_name), count(distinct content) from tv_channel;"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id. \\n Question: Give the name of the student with the most likes. \\n Answer:", "answer": ["select t2.name from likes as t1 join highschooler as t2 on t1.student_id = t2.id group by t1.student_id order by count(*) desc limit 1"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | battle_death | battle : id , name , date , bulgarian_commander , latin_commander , result | ship : lost_in_battle , id , name , tonnage , ship_type , location , disposition_of_ship | death : caused_by_ship_id , id , note , killed , injured. \\n Question: What is the ship id and name that caused most total injuries? \\n Answer:", "answer": ["select t2.id, t2.name from death as t1 join ship as t2 on t1.caused_by_ship_id = t2.id group by t2.id order by count(*) desc limit 1"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | flight_2 | airlines : uid , airline ( JetBlue Airways ) , abbreviation ( JetBlue ) , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport. \\n Question: Give the number of Jetblue Airways flights. \\n Answer:", "answer": ["select count(*) from flights as t1 join airlines as t2 on t1.airline = t2.uid where t2.airline = \"JetBlue Airways\""], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language ( English , Dutch ) , isofficial , percentage. \\n Question: How many countries speak both English and Dutch? \\n Answer:", "answer": ["select count(*) from (select t1.name from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t2.language = \"English\" intersect select t1.name from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t2.language = \"Dutch\")"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | pets_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | has_pet : stuid , petid | pets : petid , pettype ( cat ) , pet_age , weight. \\n Question: Find the last name of the student who has a cat that is age 3. \\n Answer:", "answer": ["select t1.lname from student as t1 join has_pet as t2 on t1.stuid = t2.stuid join pets as t3 on t3.petid = t2.petid where t3.pet_age = 3 and t3.pettype = 'cat'"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage. \\n Question: Return the names of the 3 most populated countries. \\n Answer:", "answer": ["select name from country order by population desc limit 3"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours. \\n Question: Find the number of matches happened in each year. \\n Answer:", "answer": ["select count(*), year from matches group by year"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent ( Europe ) , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage. \\n Question: Give the names of countries that are in Europe and have a population equal to 80000. \\n Answer:", "answer": ["select name from country where continent = \"Europe\" and population = \"80000\""], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | poker_player | poker_player : poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings | people : people_id , nationality , name , birth_date , height. \\n Question: List the names and birth dates of people in ascending alphabetical order of name. \\n Answer:", "answer": ["select name, birth_date from people order by name asc"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | tvshow | tv_channel : id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option | tv_series : id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel | cartoon : id , title , directed_by , written_by , original_air_date , production_code , channel. \\n Question: Find the production code and channel of the most recently aired cartoon . \\n Answer:", "answer": ["select production_code, channel from cartoon order by original_air_date desc limit 1"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | pets_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | has_pet : stuid , petid | pets : petid , pettype ( dog , cat ) , pet_age , weight. \\n Question: What is the first name of every student who has a dog but does not have a cat? \\n Answer:", "answer": ["select t1.fname, t1.age from student as t1 join has_pet as t2 on t1.stuid = t2.stuid join pets as t3 on t3.petid = t2.petid where t3.pettype = 'dog' and t1.stuid not in (select t1.stuid from student as t1 join has_pet as t2 on t1.stuid = t2.stuid join pets as t3 on t3.petid = t2.petid where t3.pettype = 'cat')"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker ( ford ) , fullname ( Ford Motor Company ) , country | model_list : modelid , maker , model ( ford ) | car_names : makeid , model ( ford ) , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year. \\n Question: Which models are lighter than 3500 but not built by the 'Ford Motor Company'? \\n Answer:", "answer": ["select distinct t1.model from model_list as t1 join car_names as t2 on t1.model = t2.model join cars_data as t3 on t2.makeid = t3.id join car_makers as t4 on t1.maker = t4.id where t3.weight < 3500 and t4.fullname != 'Ford motor Company';"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment. \\n Question: List the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no. \\n Answer:", "answer": ["select name, age, weight from dogs where abandoned_yn = 1"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade. \\n Question: Show the hometowns shared by at least two teachers. \\n Answer:", "answer": ["select hometown from teacher group by hometown having count(*) >= 2"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate ( Beatrix ) , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage. \\n Question: What is the official language used in the country the name of whose head of state is Beatrix. \\n Answer:", "answer": ["select t2.language from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t1.headofstate = \"Beatrix\" and t2.isofficial = \"T\""], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | singer | singer : singer_id , name , birth_year , net_worth_millions , citizenship | song : song_id , title , singer_id , sales , highest_position. \\n Question: Show distinct names of singers that have songs with sales more than 300000. \\n Answer:", "answer": ["select distinct t1.name from singer as t1 join song as t2 on t1.singer_id = t2.singer_id where t2.sales > 300000"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | poker_player | poker_player : poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings | people : people_id , nationality , name , birth_date , height. \\n Question: Return the names of all the poker players. \\n Answer:", "answer": ["select t1.name from people as t1 join poker_player as t2 on t1.people_id = t2.people_id"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment. \\n Question: How many professionals have performed any treatment to dogs? \\n Answer:", "answer": ["select count(distinct professional_id) from treatments"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id. \\n Question: How many degrees does the engineering department offer? \\n Answer:", "answer": ["select count(*) from departments as t1 join degree_programs as t2 on t1.department_id = t2.department_id where t1.department_name = 'engineer'"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | singer | singer : singer_id , name , birth_year , net_worth_millions , citizenship | song : song_id , title , singer_id , sales , highest_position. \\n Question: What is the name of the singer who is worth the most? \\n Answer:", "answer": ["select name from singer order by net_worth_millions desc limit 1"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id. \\n Question: How many courses are there? \\n Answer:", "answer": ["select count(*) from courses"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id. \\n Question: What is the description of the department whose name has the substring the computer? \\n Answer:", "answer": ["select department_description from departments where department_name like '%computer%'"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours. \\n Question: find the code of the country where has the greatest number of players. \\n Answer:", "answer": ["select country_code from players group by country_code order by count(*) desc limit 1"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | flight_2 | airlines : uid , airline , abbreviation , country ( USA ) | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport. \\n Question: List all airline names and their abbreviations in \"USA\". \\n Answer:", "answer": ["select airline, abbreviation from airlines where country = \"USA\""], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details | d : document_id , para_count. \\n Question: Show all template type codes and number of templates for each. \\n Answer:", "answer": ["select template_type_code, count(*) from templates group by template_type_code"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | world_1 | city : id , name , countrycode , district ( Gelderland ) , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage. \\n Question: What is the total population of Gelderland district? \\n Answer:", "answer": ["select sum(population) from city where district = \"Gelderland\""], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade. \\n Question: What is the total count of teachers? \\n Answer:", "answer": ["select count(*) from teacher"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id. \\n Question: What is the degree summary name that has the most number of students enrolled? \\n Answer:", "answer": ["select t1.degree_summary_name from degree_programs as t1 join student_enrolment as t2 on t1.degree_program_id = t2.degree_program_id group by t1.degree_summary_name order by count(*) desc limit 1"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | singer | singer : singer_id , name , birth_year , net_worth_millions , citizenship | song : song_id , title , singer_id , sales , highest_position. \\n Question: Show different citizenship of singers and the number of singers of each citizenship. \\n Answer:", "answer": ["select citizenship, count(*) from singer group by citizenship"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | battle_death | battle : id , name , date , bulgarian_commander , latin_commander , result | ship : lost_in_battle , id , name , tonnage , ship_type , location , disposition_of_ship | death : caused_by_ship_id , id , note , killed , injured. \\n Question: What is maximum and minimum death toll caused each time? \\n Answer:", "answer": ["select max(killed), min(killed) from death"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage. \\n Question: How many unique languages are spoken in the world? \\n Answer:", "answer": ["select count(distinct language) from countrylanguage"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | battle_death | battle : id , name , date , bulgarian_commander , latin_commander , result | ship : lost_in_battle , id , name , tonnage , ship_type , location , disposition_of_ship | death : caused_by_ship_id , id , note , killed , injured. \\n Question: What are the notes of the death events which has substring 'East'? \\n Answer:", "answer": ["select note from death where note like '%east%'"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name ( WTA Championships ) , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours. \\n Question: How many different winners both participated in the WTA Championships and were left handed? \\n Answer:", "answer": ["select count(distinct winner_name) from matches where tourney_name = 'WTA Championships' and winner_hand = 'L'"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | employee_hire_evaluation | employee : employee_id , name , age , city | shop : shop_id , name , location , district , number_products , manager_name | hiring : shop_id , employee_id , start_from , is_full_time | evaluation : employee_id , year_awarded , bonus. \\n Question: Sort all the shops by number products in descending order, and return the name, location and district of each shop. \\n Answer:", "answer": ["select name, location, district from shop order by number_products desc"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | tvshow | tv_channel : id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option | tv_series : id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel | cartoon : id , title , directed_by , written_by , original_air_date , production_code , channel. \\n Question: Which country has the most of TV Channels? List the country and number of TV Channels it has. \\n Answer:", "answer": ["select country, count(*) from tv_channel group by country order by count(*) desc limit 1;"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade. \\n Question: What are the names of the teachers whose courses have not been arranged? \\n Answer:", "answer": ["select name from teacher where teacher_id not in (select teacher_id from course_arrange)"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | poker_player | poker_player : poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings | people : people_id , nationality , name , birth_date , height. \\n Question: What is the average earnings of poker players? \\n Answer:", "answer": ["select avg(earnings) from poker_player"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | singer | singer : singer_id , name , birth_year , net_worth_millions , citizenship | song : song_id , title , singer_id , sales , highest_position. \\n Question: What are the birth year and citizenship of singers? \\n Answer:", "answer": ["select birth_year, citizenship from singer"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment. \\n Question: Count the number of dogs of an age below the average. \\n Answer:", "answer": ["select count(*) from dogs where age < ( select avg(age) from dogs )"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | tvshow | tv_channel : id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option | tv_series : id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel | cartoon : id , title , directed_by , written_by , original_air_date , production_code , channel. \\n Question: List the number of different series names and contents in the TV Channel table. \\n Answer:", "answer": ["select count(distinct series_name), count(distinct content) from tv_channel;"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | poker_player | poker_player : poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings | people : people_id , nationality , name , birth_date , height. \\n Question: What is the birth date of the poker player with the lowest earnings? \\n Answer:", "answer": ["select t1.birth_date from people as t1 join poker_player as t2 on t1.people_id = t2.people_id order by t2.earnings asc limit 1"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id. \\n Question: List all singer names in concerts in year 2014. \\n Answer:", "answer": ["select t2.name from singer_in_concert as t1 join singer as t2 on t1.singer_id = t2.singer_id join concert as t3 on t1.concert_id = t3.concert_id where t3.year = 2014"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | flight_2 | airlines : uid , airline , abbreviation , country | airports : city ( Aberdeen  , Ashley  ) , airportcode , airportname ( Ashley  ) , country , countryabbrev | flights : airline , flightno , sourceairport , destairport. \\n Question: How many flights fly from Aberdeen to Ashley? \\n Answer:", "answer": ["select count(*) from flights as t1 join airports as t2 on t1.destairport = t2.airportcode join airports as t3 on t1.sourceairport = t3.airportcode where t2.city = \"Ashley\" and t3.city = \"Aberdeen\""], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport. \\n Question: Which city is the most frequent source airport? \\n Answer:", "answer": ["select t1.city from airports as t1 join flights as t2 on t1.airportcode = t2.sourceairport group by t1.city order by count(*) desc limit 1"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id. \\n Question: Find the minimum grade of students who have no friends. \\n Answer:", "answer": ["select min(grade) from highschooler where id not in (select t1.student_id from friend as t1 join highschooler as t2 on t1.student_id = t2.id)"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | flight_2 | airlines : uid , airline , abbreviation , country | airports : city ( Aberdeen  ) , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport. \\n Question: How many flights depart from City Aberdeen? \\n Answer:", "answer": ["select count(*) from flights as t1 join airports as t2 on t1.sourceairport = t2.airportcode where t2.city = \"Aberdeen\""], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours. \\n Question: Which year had the most matches? \\n Answer:", "answer": ["select year from matches group by year order by count(*) desc limit 1"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id. \\n Question: How many friends does each student have? \\n Answer:", "answer": ["select student_id, count(*) from friend group by student_id"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode ( APG , CVO ) , airportname , country , countryabbrev | flights : airline , flightno , sourceairport (  APG ,  CVO ) , destairport (  APG ,  CVO ). \\n Question: Which airlines have departures from CVO but not from APG airports? \\n Answer:", "answer": ["select t1.airline from airlines as t1 join flights as t2 on t1.uid = t2.airline where t2.sourceairport = \"CVO\" except select t1.airline from airlines as t1 join flights as t2 on t1.uid = t2.airline where t2.sourceairport = \"APG\""], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade. \\n Question: Show names of teachers and the number of courses they teach. \\n Answer:", "answer": ["select t2.name, count(*) from course_arrange as t1 join teacher as t2 on t1.teacher_id = t2.teacher_id group by t2.name"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport. \\n Question: Which city has most number of departing flights? \\n Answer:", "answer": ["select t1.city from airports as t1 join flights as t2 on t1.airportcode = t2.sourceairport group by t1.city order by count(*) desc limit 1"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details | d : document_id , para_count. \\n Question: Show ids for all templates that are used by more than one document. \\n Answer:", "answer": ["select template_id from documents group by template_id having count(*) > 1"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours. \\n Question: Find the average age of losers and winners of all matches. \\n Answer:", "answer": ["select avg(loser_age), avg(winner_age) from matches"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id. \\n Question: Show the names of students who have a grade higher than 5 and have at least 2 friends. \\n Answer:", "answer": ["select t2.name from friend as t1 join highschooler as t2 on t1.student_id = t2.id where t2.grade > 5 group by t1.student_id having count(*) >= 2"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade. \\n Question: What is the age and hometown of every teacher? \\n Answer:", "answer": ["select age, hometown from teacher"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | tvshow | tv_channel : id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option | tv_series : id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel | cartoon : id , title , directed_by , written_by , original_air_date , production_code , channel. \\n Question: List the title of all cartoons in alphabetical order. \\n Answer:", "answer": ["select title from cartoon order by title"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year. \\n Question: What is the number of cars with a greater accelerate than the one with the most horsepower? \\n Answer:", "answer": ["select count(*) from cars_data where accelerate > ( select accelerate from cars_data order by horsepower desc limit 1 );"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id. \\n Question: How many high schoolers are there? \\n Answer:", "answer": ["select count(*) from highschooler"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state ( Wisconsin ) , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state ( Wisconsin , Hawaii ) , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment. \\n Question: What are the emails of the professionals living in either the state of Hawaii or the state of Wisconsin? \\n Answer:", "answer": ["select email_address from professionals where state = 'Hawaii' or state = 'Wisconsin'"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | employee_hire_evaluation | employee : employee_id , name , age , city | shop : shop_id , name , location , district , number_products , manager_name | hiring : shop_id , employee_id , start_from , is_full_time | evaluation : employee_id , year_awarded , bonus. \\n Question: Count the number of employees \\n Answer:", "answer": ["select count(*) from employee"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id. \\n Question: On average, when were the transcripts printed? \\n Answer:", "answer": ["select avg(transcript_date) from transcripts"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | pets_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | has_pet : stuid , petid | pets : petid , pettype , pet_age , weight. \\n Question: What is the average age for all students who do not own any pets ? \\n Answer:", "answer": ["select avg(age) from student where stuid not in (select stuid from has_pet)"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker ( volvo ) , fullname ( Volvo ) , country | model_list : modelid , maker , model ( volvo ) | car_names : makeid , model ( volvo ) , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year. \\n Question: What is the average edispl of the cars of model volvo? \\n Answer:", "answer": ["select avg(t2.edispl) from car_names as t1 join cars_data as t2 on t1.makeid = t2.id where t1.model = 'volvo';"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment. \\n Question: List the arrival date and the departure date for all the dogs. \\n Answer:", "answer": ["select date_arrived, date_departed from dogs"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment. \\n Question: Find the average age of the dogs who went through treatments. \\n Answer:", "answer": ["select avg(age) from dogs where dog_id in ( select dog_id from treatments )"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details | d : document_id , para_count. \\n Question: Return the names and template ids for documents that contain the letter w in their description. \\n Answer:", "answer": ["select document_name, template_id from documents where document_description like \"%w%\""], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | wta_1 | players : player_id , first_name , last_name ( Date , Last ) , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours. \\n Question: List the first and last name of all players in the order of birth date. \\n Answer:", "answer": ["select first_name, last_name from players order by birth_date"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment. \\n Question: Who owns the youngest dog? Give me his or her last name. \\n Answer:", "answer": ["select t1.last_name from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id where t2.age = ( select max(age) from dogs )"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name ( Summer Show ) , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details | d : document_id , para_count. \\n Question: Count the number of paragraphs in the document named 'Summer Show'. \\n Answer:", "answer": ["select count(*) from paragraphs as t1 join documents as t2 on t1.document_id = t2.document_id where t2.document_name = 'Summer Show'"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode ( AHD ) , airportname , country , countryabbrev | flights : airline , flightno , sourceairport (  AHD ) , destairport (  AHD ). \\n Question: What are airlines that have flights arriving at airport 'AHD'? \\n Answer:", "answer": ["select t1.airline from airlines as t1 join flights as t2 on t1.uid = t2.airline where t2.destairport = \"AHD\""], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment. \\n Question: Which professionals have operated a treatment that costs less than the average? Give me theor first names and last names. \\n Answer:", "answer": ["select distinct t1.first_name, t1.last_name from professionals as t1 join treatments as t2 where cost_of_treatment < ( select avg(cost_of_treatment) from treatments )"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id. \\n Question: What are the names and locations of the stadiums that had concerts that occurred in both 2014 and 2015? \\n Answer:", "answer": ["select t2.name, t2.location from concert as t1 join stadium as t2 on t1.stadium_id = t2.stadium_id where t1.year = 2014 intersect select t2.name, t2.location from concert as t1 join stadium as t2 on t1.stadium_id = t2.stadium_id where t1.year = 2015"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours. \\n Question: What is the code of the country with the most players? \\n Answer:", "answer": ["select country_code from players group by country_code order by count(*) desc limit 1"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id. \\n Question: What are the names and descriptions for all the sections? \\n Answer:", "answer": ["select section_name, section_description from sections"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | tvshow | tv_channel : id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option | tv_series : id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel | cartoon : id , title , directed_by , written_by ( Todd Casey ) , original_air_date , production_code , channel. \\n Question: What are the countries that are not playing cartoons written by Todd Casey? \\n Answer:", "answer": ["select country from tv_channel except select t1.country from tv_channel as t1 join cartoon as t2 on t1.id = t2.channel where t2.written_by = 'Todd Casey'"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details | d : document_id , para_count. \\n Question: Return the code of the template type that is most commonly used in documents. \\n Answer:", "answer": ["select t1.template_type_code from templates as t1 join documents as t2 on t1.template_id = t2.template_id group by t1.template_type_code order by count(*) desc limit 1"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours. \\n Question: What are the average ages of losers and winners across matches? \\n Answer:", "answer": ["select avg(loser_age), avg(winner_age) from matches"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours. \\n Question: Find the year that has the most number of matches. \\n Answer:", "answer": ["select year from matches group by year order by count(*) desc limit 1"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours. \\n Question: What are the codes of countries with more than 50 players? \\n Answer:", "answer": ["select country_code from players group by country_code having count(*) > 50"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours. \\n Question: How many distinct countries do players come from? \\n Answer:", "answer": ["select count(distinct country_code) from players"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | museum_visit | museum : museum_id , name , num_of_staff , open_year | visitor : id , name , level_of_membership , age | visit : museum_id , visitor_id , num_of_ticket , total_spent. \\n Question: find the names of museums which have more staff than the minimum staff number of all museums opened after 2010. \\n Answer:", "answer": ["select name from museum where num_of_staff > (select min(num_of_staff) from museum where open_year > 2010)"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details | d : document_id , para_count. \\n Question: Return the id of the document with the fewest paragraphs. \\n Answer:", "answer": ["select document_id from paragraphs group by document_id order by count(*) asc limit 1"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance. \\n Question: Count the number of conductors. \\n Answer:", "answer": ["select count(*) from conductor"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id. \\n Question: How many courses in total are listed? \\n Answer:", "answer": ["select count(*) from courses"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | cre_Doc_Template_Mgt | ref_template_types : template_type_code ( PPT , PP ) , template_type_description | templates : template_id , version_number , template_type_code ( PPT , PP ) , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details | d : document_id , para_count. \\n Question: Return the ids of templates that have the code PP or PPT. \\n Answer:", "answer": ["select template_id from templates where template_type_code = \"PP\" or template_type_code = \"PPT\""], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | employee_hire_evaluation | employee : employee_id , name , age , city | shop : shop_id , name , location , district , number_products , manager_name | hiring : shop_id , employee_id , start_from , is_full_time | evaluation : employee_id , year_awarded , bonus. \\n Question: Find the name of the employee who got the highest one time bonus. \\n Answer:", "answer": ["select t1.name from employee as t1 join evaluation as t2 on t1.employee_id = t2.employee_id order by t2.bonus desc limit 1"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade. \\n Question: What is the hometown of the youngest teacher? \\n Answer:", "answer": ["select hometown from teacher order by age asc limit 1"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id. \\n Question: What is the name and capacity of the stadium with the most concerts after 2013 ? \\n Answer:", "answer": ["select t2.name, t2.capacity from concert as t1 join stadium as t2 on t1.stadium_id = t2.stadium_id where t1.year > 2013 group by t2.stadium_id order by count(*) desc limit 1"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment. \\n Question: Find the arriving date and the departing date of the dogs that received a treatment. \\n Answer:", "answer": ["select distinct t1.date_arrived, t1.date_departed from dogs as t1 join treatments as t2 on t1.dog_id = t2.dog_id"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name ( Australian Open , WTA Championships ) , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours. \\n Question: What are the first names and country codes for players who won both the WTA Championships and the Australian Open? \\n Answer:", "answer": ["select t1.country_code, t1.first_name from players as t1 join matches as t2 on t1.player_id = t2.winner_id where t2.tourney_name = 'WTA Championships' intersect select t1.country_code, t1.first_name from players as t1 join matches as t2 on t1.player_id = t2.winner_id where t2.tourney_name = 'Australian Open'"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode ( APG , CVO ) , airportname , country , countryabbrev | flights : airline , flightno , sourceairport (  APG ,  CVO ) , destairport (  APG ,  CVO ). \\n Question: Find all airlines that have flights from airport 'CVO' but not from 'APG'. \\n Answer:", "answer": ["select t1.airline from airlines as t1 join flights as t2 on t1.uid = t2.airline where t2.sourceairport = \"CVO\" except select t1.airline from airlines as t1 join flights as t2 on t1.uid = t2.airline where t2.sourceairport = \"APG\""], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | employee_hire_evaluation | employee : employee_id , name , age , city | shop : shop_id , name , location , district , number_products , manager_name | hiring : shop_id , employee_id , start_from , is_full_time | evaluation : employee_id , year_awarded , bonus. \\n Question: find the minimum and maximum number of products of all stores. \\n Answer:", "answer": ["select min(number_products), max(number_products) from shop"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment. \\n Question: How many dogs went through any treatments? \\n Answer:", "answer": ["select count(distinct dog_id) from treatments"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | pets_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | has_pet : stuid , petid | pets : petid , pettype , pet_age , weight. \\n Question: Find the id of the pet owned by student whose last name is ‘Smith’. \\n Answer:", "answer": ["select t2.petid from student as t1 join has_pet as t2 on t1.stuid = t2.stuid where t1.lname = 'Smith'"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details | d : document_id , para_count. \\n Question: Show all document ids and the number of paragraphs in each document. Order by document id. \\n Answer:", "answer": ["select document_id, count(*) from paragraphs group by document_id order by document_id"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | pets_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | has_pet : stuid , petid | pets : petid , pettype ( cat ) , pet_age , weight. \\n Question: What is the last name of the student who has a cat that is 3 years old? \\n Answer:", "answer": ["select t1.lname from student as t1 join has_pet as t2 on t1.stuid = t2.stuid join pets as t3 on t3.petid = t2.petid where t3.pet_age = 3 and t3.pettype = 'cat'"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment. \\n Question: What are all the possible breed type and size type combinations? \\n Answer:", "answer": ["select distinct breed_code, size_code from dogs"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment. \\n Question: What are the names of the dogs for which the owner has not spend more than 1000 for treatment ? \\n Answer:", "answer": ["select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum(cost_of_treatment) > 1000 )"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city ( Port Chelsea ) , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id. \\n Question: What is the zip code of the address in the city Port Chelsea? \\n Answer:", "answer": ["select zip_postcode from addresses where city = 'Port Chelsea'"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id. \\n Question: What are the names and id of courses having at most 2 sections? \\n Answer:", "answer": ["select t1.course_name, t1.course_id from courses as t1 join sections as t2 on t1.course_id = t2.course_id group by t1.course_id having count(*) <= 2"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id. \\n Question: Whose permanent address is different from his or her current address? List his or her first name. \\n Answer:", "answer": ["select first_name from students where current_address_id != permanent_address_id"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | poker_player | poker_player : poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings | people : people_id , nationality , name , birth_date , height. \\n Question: What are the names of poker players? \\n Answer:", "answer": ["select t1.name from people as t1 join poker_player as t2 on t1.people_id = t2.people_id"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | pets_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | has_pet : stuid , petid | pets : petid , pettype , pet_age , weight. \\n Question: For students who have pets , how many pets does each student have ? list their ids instead of names . \\n Answer:", "answer": ["select count(*), t1.stuid from student as t1 join has_pet as t2 on t1.stuid = t2.stuid group by t1.stuid"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage. \\n Question: What are the names of the nations with the 3 lowest populations? \\n Answer:", "answer": ["select name from country order by population asc limit 3"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | employee_hire_evaluation | employee : employee_id , name , age , city | shop : shop_id , name , location , district , number_products , manager_name | hiring : shop_id , employee_id , start_from , is_full_time | evaluation : employee_id , year_awarded , bonus. \\n Question: What is the name of the shop that is hiring the largest number of employees? \\n Answer:", "answer": ["select t2.name from hiring as t1 join shop as t2 on t1.shop_id = t2.shop_id group by t1.shop_id order by count(*) desc limit 1"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode ( AHD ) , airportname , country , countryabbrev | flights : airline , flightno , sourceairport (  AHD ) , destairport (  AHD ). \\n Question: What are airlines that have some flight departing from airport 'AHD'? \\n Answer:", "answer": ["select t1.airline from airlines as t1 join flights as t2 on t1.uid = t2.airline where t2.sourceairport = \"AHD\""], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year. \\n Question: What is the name of the different car makers who produced a car in 1970? \\n Answer:", "answer": ["select distinct t1.maker from car_makers as t1 join model_list as t2 on t1.id = t2.maker join car_names as t3 on t2.model = t3.model join cars_data as t4 on t3.makeid = t4.id where t4.year = '1970';"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | singer | singer : singer_id , name , birth_year , net_worth_millions , citizenship | song : song_id , title , singer_id , sales , highest_position. \\n Question: Show the names of singers that have more than one song. \\n Answer:", "answer": ["select t1.name from singer as t1 join song as t2 on t1.singer_id = t2.singer_id group by t1.name having count(*) > 1"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | pets_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | has_pet : stuid , petid | pets : petid , pettype , pet_age , weight. \\n Question: Find the average weight for each pet type. \\n Answer:", "answer": ["select avg(weight), pettype from pets group by pettype"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details | d : document_id , para_count. \\n Question: Return the different document ids along with the number of paragraphs corresponding to each, ordered by id. \\n Answer:", "answer": ["select document_id, count(*) from paragraphs group by document_id order by document_id"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id. \\n Question: what is the name and nation of the singer who have a song having 'Hey' in its name? \\n Answer:", "answer": ["select name, country from singer where song_name like '%hey%'"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id. \\n Question: Show the student IDs and numbers of friends corresponding to each. \\n Answer:", "answer": ["select student_id, count(*) from friend group by student_id"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode ( ATO ) , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport. \\n Question: How many flights have destination ATO? \\n Answer:", "answer": ["select count(*) from flights where destairport = \"ATO\""], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details | d : document_id , para_count. \\n Question: Show all template type codes and the number of documents using each type. \\n Answer:", "answer": ["select t1.template_type_code, count(*) from templates as t1 join documents as t2 on t1.template_id = t2.template_id group by t1.template_type_code"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | flight_2 | airlines : uid , airline , abbreviation , country | airports : city ( Aberdeen  ) , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport. \\n Question: What are airport names at City 'Aberdeen'? \\n Answer:", "answer": ["select airportname from airports where city = \"Aberdeen\""], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | voter_1 | area_code_state : area_code , state ( CA ) | contestants : contestant_number , contestant_name | votes : vote_id , phone_number , state ( CA ) , contestant_number , created. \\n Question: What is last date created of votes from the state 'CA'? \\n Answer:", "answer": ["select max(created) from votes where state = 'CA'"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name ( Data base ) , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details | d : document_id , para_count. \\n Question: What is the template type code of the template used by document with the name \"Data base\"? \\n Answer:", "answer": ["select t1.template_type_code from templates as t1 join documents as t2 on t1.template_id = t2.template_id where t2.document_name = \"Data base\""], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | flight_2 | airlines : uid , airline , abbreviation , country | airports : city ( Abilene  , Aberdeen  ) , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport. \\n Question: How many flights land in Aberdeen or Abilene? \\n Answer:", "answer": ["select count(*) from flights as t1 join airports as t2 on t1.destairport = t2.airportcode where t2.city = \"Aberdeen\" or t2.city = \"Abilene\""], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details | d : document_id , para_count. \\n Question: Show all template ids and number of documents using each template. \\n Answer:", "answer": ["select template_id, count(*) from documents group by template_id"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent ( Asia ) , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage. \\n Question: What are the name, population, and life expectancy of the largest Asian country by land? \\n Answer:", "answer": ["select name, population, lifeexpectancy from country where continent = \"Asia\" order by surfacearea desc limit 1"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance. \\n Question: Count the number of different nationalities of conductors. \\n Answer:", "answer": ["select count(distinct nationality) from conductor"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent ( Asia ) , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language ( Chinese ) , isofficial , percentage. \\n Question: Which unique cities are in Asian countries where Chinese is the official language ? \\n Answer:", "answer": ["select distinct t3.name from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode join city as t3 on t1.code = t3.countrycode where t2.isofficial = 't' and t2.language = 'chinese' and t1.continent = \"asia\""], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | voter_1 | area_code_state : area_code , state | contestants : contestant_number , contestant_name ( Tabatha Gehling ) | votes : vote_id , phone_number , state , contestant_number , created. \\n Question: What are the create dates, states, and phone numbers of the votes that were for the contestant named 'Tabatha Gehling'? \\n Answer:", "answer": ["select t2.created, t2.state, t2.phone_number from contestants as t1 join votes as t2 on t1.contestant_number = t2.contestant_number where t1.contestant_name = 'Tabatha Gehling'"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | employee_hire_evaluation | employee : employee_id , name , age , city | shop : shop_id , name , location , district , number_products , manager_name | hiring : shop_id , employee_id , start_from , is_full_time | evaluation : employee_id , year_awarded , bonus. \\n Question: Find the names of employees who never won any award in the evaluation. \\n Answer:", "answer": ["select name from employee where employee_id not in (select employee_id from evaluation)"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | flight_2 | airlines : uid , airline , abbreviation , country ( USA ) | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport. \\n Question: How many airlines are from USA? \\n Answer:", "answer": ["select count(*) from airlines where country = \"USA\""], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent ( Asia ) , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage. \\n Question: What is the total population and maximum GNP in Asia? \\n Answer:", "answer": ["select sum(population), max(gnp) from country where continent = \"Asia\""], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | tvshow | tv_channel : id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option | tv_series : id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel | cartoon : id , title , directed_by , written_by , original_air_date , production_code , channel. \\n Question: What is the maximum and minimum share for the TV series? \\n Answer:", "answer": ["select max(share), min(share) from tv_series;"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year. \\n Question: Which model has the most version(make) of cars? \\n Answer:", "answer": ["select model from car_names group by model order by count(*) desc limit 1;"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage. \\n Question: What is the total number of unique official languages spoken in the countries that are founded before 1930? \\n Answer:", "answer": ["select count(distinct t2.language) from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where indepyear < 1930 and t2.isofficial = \"T\""], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage. \\n Question: What is the number of distinct languages used around the world? \\n Answer:", "answer": ["select count(distinct language) from countrylanguage"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | singer | singer : singer_id , name , birth_year , net_worth_millions , citizenship | song : song_id , title , singer_id , sales , highest_position. \\n Question: What is the sname of every sing that does not have any song? \\n Answer:", "answer": ["select name from singer where singer_id not in (select singer_id from song)"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id. \\n Question: What is the first, middle, and last name of the first student to register? \\n Answer:", "answer": ["select first_name, middle_name, last_name from students order by date_first_registered asc limit 1"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | employee_hire_evaluation | employee : employee_id , name , age , city | shop : shop_id , name , location , district , number_products , manager_name | hiring : shop_id , employee_id , start_from , is_full_time | evaluation : employee_id , year_awarded , bonus. \\n Question: Find the number of shops in each location. \\n Answer:", "answer": ["select count(*), location from shop group by location"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id. \\n Question: What are all distinct countries where singers above age 20 are from? \\n Answer:", "answer": ["select distinct country from singer where age > 20"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | world_1 | city : id , name ( Independence ) , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage. \\n Question: What are the name, independence year, and surface area of the country with the smallest population? \\n Answer:", "answer": ["select name, surfacearea, indepyear from country order by population limit 1"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details | d : document_id , para_count. \\n Question: Count the number of different templates used for documents. \\n Answer:", "answer": ["select count(distinct template_id) from documents"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | employee_hire_evaluation | employee : employee_id , name , age , city | shop : shop_id , name , location , district , number_products , manager_name | hiring : shop_id , employee_id , start_from , is_full_time | evaluation : employee_id , year_awarded , bonus. \\n Question: For each shop, return the number of employees working there and the name of the shop. \\n Answer:", "answer": ["select count(*), t2.name from hiring as t1 join shop as t2 on t1.shop_id = t2.shop_id group by t2.name"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance. \\n Question: Show the names of conductors that have conducted more than one orchestras. \\n Answer:", "answer": ["select t1.name from conductor as t1 join orchestra as t2 on t1.conductor_id = t2.conductor_id group by t2.conductor_id having count(*) > 1"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details | d : document_id , para_count. \\n Question: Return the different descriptions for templates that have been used in a document. \\n Answer:", "answer": ["select distinct t1.template_type_description from ref_template_types as t1 join templates as t2 on t1.template_type_code = t2.template_type_code join documents as t3 on t2.template_id = t3.template_id"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage. \\n Question: Return the names and surface areas of the 5 largest countries. \\n Answer:", "answer": ["select name, surfacearea from country order by surfacearea desc limit 5"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | museum_visit | museum : museum_id , name , num_of_staff , open_year | visitor : id , name , level_of_membership , age | visit : museum_id , visitor_id , num_of_ticket , total_spent. \\n Question: What is the average age of the visitors whose membership level is not higher than 4? \\n Answer:", "answer": ["select avg(age) from visitor where level_of_membership <= 4"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | museum_visit | museum : museum_id , name , num_of_staff , open_year | visitor : id , name , level_of_membership , age | visit : museum_id , visitor_id , num_of_ticket , total_spent. \\n Question: Find the id and name of the museum that has the most staff members? \\n Answer:", "answer": ["select museum_id, name from museum order by num_of_staff desc limit 1"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | tvshow | tv_channel : id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option | tv_series : id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel | cartoon : id , title , directed_by ( Brandon Vietti , Ben Jones ) , written_by , original_air_date , production_code , channel. \\n Question: List the title of all cartoon directed by \"Ben Jones\" or \"Brandon Vietti\". \\n Answer:", "answer": ["select title from cartoon where directed_by = \"Ben Jones\" or directed_by = \"Brandon Vietti\";"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent ( Asia , Africa ) , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage. \\n Question: Which African countries have a smaller population than that of any country in Asia? \\n Answer:", "answer": ["select name from country where continent = \"Africa\" and population < (select min(population) from country where continent = \"Asia\")"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | poker_player | poker_player : poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings | people : people_id , nationality , name , birth_date , height. \\n Question: What are the names of poker players in descending order of earnings? \\n Answer:", "answer": ["select t1.name from people as t1 join poker_player as t2 on t1.people_id = t2.people_id order by t2.earnings desc"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id. \\n Question: List all song names by singers above the average age. \\n Answer:", "answer": ["select song_name from singer where age > (select avg(age) from singer)"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours. \\n Question: Find the name and rank of the 3 youngest winners across all matches. \\n Answer:", "answer": ["select distinct winner_name, winner_rank from matches order by winner_age limit 3"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | poker_player | poker_player : poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings | people : people_id , nationality , name , birth_date , height. \\n Question: What is the average earnings of poker players with height higher than 200? \\n Answer:", "answer": ["select avg(t2.earnings) from people as t1 join poker_player as t2 on t1.people_id = t2.people_id where t1.height > 200"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id. \\n Question: What are the names of students who have 2 or more likes? \\n Answer:", "answer": ["select t2.name from likes as t1 join highschooler as t2 on t1.student_id = t2.id group by t1.student_id having count(*) >= 2"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language ( English ) , isofficial , percentage. \\n Question: Return the country codes for countries that do not speak English. \\n Answer:", "answer": ["select countrycode from countrylanguage except select countrycode from countrylanguage where language = \"English\""], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment. \\n Question: List the email, cell phone and home phone of all the professionals. \\n Answer:", "answer": ["select email_address, cell_number, home_phone from professionals"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade. \\n Question: Show names of teachers that teach at least two courses. \\n Answer:", "answer": ["select t2.name from course_arrange as t1 join teacher as t2 on t1.teacher_id = t2.teacher_id group by t2.name having count(*) >= 2"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id. \\n Question: How many high schoolers are in each grade? \\n Answer:", "answer": ["select grade, count(*) from highschooler group by grade"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport. \\n Question: What is the abbreviation of the airilne has the fewest flights and what country is it in? \\n Answer:", "answer": ["select t1.abbreviation, t1.country from airlines as t1 join flights as t2 on t1.uid = t2.airline group by t1.airline order by count(*) limit 1"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage. \\n Question: What is name of the country that speaks the largest number of languages? \\n Answer:", "answer": ["select t1.name from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode group by t1.name order by count(*) desc limit 1"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language ( English ) , isofficial , percentage. \\n Question: How many people live in countries that do not speak English? \\n Answer:", "answer": ["select sum(population) from country where name not in (select t1.name from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t2.language = \"English\")"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment. \\n Question: How many owners temporarily do not have any dogs? \\n Answer:", "answer": ["select count(*) from owners where owner_id not in ( select owner_id from dogs )"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment. \\n Question: List each owner's first name, last name, and the size of his for her dog. \\n Answer:", "answer": ["select t1.first_name, t1.last_name, t2.size_code from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | network_1 | highschooler : id , name ( Kyle ) , grade | friend : student_id , friend_id | likes : student_id , liked_id. \\n Question: How many friends does the high school student Kyle have? \\n Answer:", "answer": ["select count(*) from friend as t1 join highschooler as t2 on t1.student_id = t2.id where t2.name = \"Kyle\""], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id. \\n Question: What are the names of the sections in reverse alphabetical order? \\n Answer:", "answer": ["select section_name from sections order by section_name desc"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | singer | singer : singer_id , name , birth_year , net_worth_millions , citizenship | song : song_id , title , singer_id , sales , highest_position. \\n Question: What are the names of the singers who are not French citizens? \\n Answer:", "answer": ["select name from singer where citizenship != \"France\""], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id. \\n Question: Return the grade that has the greatest number of high schoolers. \\n Answer:", "answer": ["select grade from highschooler group by grade order by count(*) desc limit 1"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id. \\n Question: When is the first transcript released? List the date and details. \\n Answer:", "answer": ["select transcript_date, other_details from transcripts order by transcript_date asc limit 1"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance. \\n Question: What is the name of the conductor who has worked the greatest number of years? \\n Answer:", "answer": ["select name from conductor order by year_of_work desc limit 1"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | wta_1 | players : player_id , first_name , last_name ( Date ) , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours. \\n Question: Find the total number of tours for each ranking date. \\n Answer:", "answer": ["select sum(tours), ranking_date from rankings group by ranking_date"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name ( Afghanistan ) , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage. \\n Question: How many official languages are spoken in Afghanistan? \\n Answer:", "answer": ["select count(*) from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t1.name = \"Afghanistan\" and isofficial = \"T\""], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours. \\n Question: What are the first names of all players, and their total ranking points? \\n Answer:", "answer": ["select sum(ranking_points), t1.first_name from players as t1 join rankings as t2 on t1.player_id = t2.player_id group by t1.first_name"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details | d : document_id , para_count. \\n Question: What are the type codes and descriptions for all template types? \\n Answer:", "answer": ["select template_type_code, template_type_description from ref_template_types"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | world_1 | city : id , name ( Americana ) , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent ( North America ) , region ( North America ) , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage. \\n Question: What is the total population and average area of countries in the continent of North America whose area is bigger than 3000 ? \\n Answer:", "answer": ["select sum(population), avg(surfacearea) from country where continent = \"north america\" and surfacearea > 3000"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year. \\n Question: How many continents are there? \\n Answer:", "answer": ["select count(*) from continents;"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details | d : document_id , para_count. \\n Question: What are the ids, version numbers, and type codes for each template? \\n Answer:", "answer": ["select template_id, version_number, template_type_code from templates"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport. \\n Question: Return the number of flights. \\n Answer:", "answer": ["select count(*) from flights"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | singer | singer : singer_id , name , birth_year , net_worth_millions , citizenship | song : song_id , title , singer_id , sales , highest_position. \\n Question: Show the name of singers whose birth year is either 1948 or 1949? \\n Answer:", "answer": ["select name from singer where birth_year = 1948 or birth_year = 1949"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance. \\n Question: Please show the different record companies and the corresponding number of orchestras. \\n Answer:", "answer": ["select record_company, count(*) from orchestra group by record_company"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name ( Brazil ) , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage. \\n Question: What are the population and life expectancies in Brazil? \\n Answer:", "answer": ["select population, lifeexpectancy from country where name = \"Brazil\""], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | museum_visit | museum : museum_id , name , num_of_staff , open_year | visitor : id , name , level_of_membership , age | visit : museum_id , visitor_id , num_of_ticket , total_spent. \\n Question: Find the number of visitors who did not visit any museum opened after 2010. \\n Answer:", "answer": ["select count(*) from visitor where id not in (select t2.visitor_id from museum as t1 join visit as t2 on t1.museum_id = t2.museum_id where t1.open_year > 2010)"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | orchestra | conductor : conductor_id , name , age , nationality ( USA ) , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance. \\n Question: What are the names of conductors whose nationalities are not \"USA\"? \\n Answer:", "answer": ["select name from conductor where nationality != 'USA'"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours. \\n Question: List the number of all matches who played in years of 2013 or 2016. \\n Answer:", "answer": ["select count(*) from matches where year = 2013 or year = 2016"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours. \\n Question: What is the first name and country code of the player with the most tours? \\n Answer:", "answer": ["select t1.country_code, t1.first_name from players as t1 join rankings as t2 on t1.player_id = t2.player_id order by t2.tours desc limit 1"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id. \\n Question: How many times at most can a course enrollment result show in different transcripts? Also show the course enrollment id. \\n Answer:", "answer": ["select count(*), student_course_id from transcript_contents group by student_course_id order by count(*) desc limit 1"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id. \\n Question: Show countries where a singer above age 40 and a singer below 30 are from. \\n Answer:", "answer": ["select country from singer where age > 40 intersect select country from singer where age < 30"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment. \\n Question: Which dogs have not cost their owner more than 1000 for treatment ? List the dog names . \\n Answer:", "answer": ["select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum(cost_of_treatment) > 1000 )"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year. \\n Question: What model has the most different versions? \\n Answer:", "answer": ["select model from car_names group by model order by count(*) desc limit 1;"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | tvshow | tv_channel : id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option | tv_series : id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel | cartoon : id , title , directed_by , written_by , original_air_date , production_code , channel. \\n Question: list all cartoon titles and their directors ordered by their air date \\n Answer:", "answer": ["select title, directed_by from cartoon order by original_air_date"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year. \\n Question: What is the maximum horsepower and the make of the car models with 3 cylinders? \\n Answer:", "answer": ["select t2.horsepower, t1.make from car_names as t1 join cars_data as t2 on t1.makeid = t2.id where t2.cylinders = 3 order by t2.horsepower desc limit 1;"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details | d : document_id , para_count. \\n Question: Return the id and type code of the template that is used for the greatest number of documents. \\n Answer:", "answer": ["select t1.template_id, t2.template_type_code from documents as t1 join templates as t2 on t1.template_id = t2.template_id group by t1.template_id order by count(*) desc limit 1"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language ( English , Dutch ) , isofficial , percentage. \\n Question: Which countries have either English or Dutch as an official language? \\n Answer:", "answer": ["select * from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t2.language = \"English\" and isofficial = \"T\" union select * from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t2.language = \"Dutch\" and isofficial = \"T\""], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id. \\n Question: What are  the different countries with singers above age 20? \\n Answer:", "answer": ["select distinct country from singer where age > 20"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name ( math ) , course_description , other_details | departments : department_id , department_name ( math ) , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id. \\n Question: How is the math course described? \\n Answer:", "answer": ["select course_description from courses where course_name = 'math'"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | poker_player | poker_player : poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings | people : people_id , nationality , name , birth_date , height. \\n Question: How many people are there of each nationality? \\n Answer:", "answer": ["select nationality, count(*) from people group by nationality"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name ( Welcome to NY ) , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details | d : document_id , para_count. \\n Question: Show all paragraph ids and texts for the document with name 'Welcome to NY'. \\n Answer:", "answer": ["select t1.paragraph_id, t1.paragraph_text from paragraphs as t1 join documents as t2 on t1.document_id = t2.document_id where t2.document_name = 'Welcome to NY'"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details | d : document_id , para_count. \\n Question: Show all template type codes and descriptions. \\n Answer:", "answer": ["select template_type_code, template_type_description from ref_template_types"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport. \\n Question: What airline serves the most flights? \\n Answer:", "answer": ["select t1.airline from airlines as t1 join flights as t2 on t1.uid = t2.airline group by t1.airline order by count(*) desc limit 1"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours. \\n Question: Find the total number of players. \\n Answer:", "answer": ["select count(*) from players"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment. \\n Question: Which owner owns the most dogs? List the owner id, first name and last name. \\n Answer:", "answer": ["select t1.owner_id, t2.first_name, t2.last_name from dogs as t1 join owners as t2 on t1.owner_id = t2.owner_id group by t1.owner_id order by count(*) desc limit 1"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | world_1 | city : id , name ( Independence ) , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage. \\n Question: What are the names of all the countries that became independent after 1950? \\n Answer:", "answer": ["select name from country where indepyear > 1950"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance. \\n Question: List the names of orchestras that have no performance. \\n Answer:", "answer": ["select orchestra from orchestra where orchestra_id not in (select orchestra_id from performance)"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance. \\n Question: What is the name of the conductor who has conducted the most orchestras? \\n Answer:", "answer": ["select t1.name from conductor as t1 join orchestra as t2 on t1.conductor_id = t2.conductor_id group by t2.conductor_id order by count(*) desc limit 1"], "label": "QA"}
{"question": "Based on the structured SQL information below, please convert the problem into an SQL query statement. \\n SQL data (already structured as text): | singer | singer : singer_id , name , birth_year , net_worth_millions , citizenship | song : song_id , title , singer_id , sales , highest_position. \\n Question: List the name of singers in ascending order of net worth. \\n Answer:", "answer": ["select name from singer order by net_worth_millions asc"], "label": "QA"}
